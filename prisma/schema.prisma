generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mongodb"
  url      = env("database_url")
}

model AcarsUser {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  username          String    @unique
  firstName         String
  lastName          String
  email             String    @unique
  password          String

  oauthAccounts     OAuthAccount[]
  currPosition      Station?
  socketConnection  SocketConnection?
  apiToken          String?   @unique
  isConnected       Boolean   @default(false)
  isSuspended       Boolean   @default(false)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model OAuthAccount {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  provider      String    // "vatsim", "discord", "google"
  providerId    String
  acarsUser     String    @db.ObjectId // Foreign key for AcarsUser
  
  accessToken   String
  refreshToken  String
  tokenExpiry   DateTime

  meta          Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          AcarsUser @relation(fields: [acarsUser], references: [id])
  @@unique([provider, providerId])
}

model SocketConnection {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  acarsUser         String?     @unique @db.ObjectId
  socketId          String      @unique
  user              AcarsUser?  @relation(fields: [acarsUser], references: [id], onDelete: Cascade)
}

model Station {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  logonCode         String      @unique
  acarsUser         String?     @unique @db.ObjectId // Foreign key for AcarsUser
  txCount           Int         @default(0)

  sentMessages      Message[]   @relation("SenderRelation")
  receivedMessages  Message[]   @relation("ReceiverRelation")

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user              AcarsUser?  @relation(fields: [acarsUser], references: [id])
}

model Message {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  sender          String?
  recipient       String?
  responseCode    String
  message         String
  received        Boolean   @default(false)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  senderUser      Station?  @relation("SenderRelation", fields: [sender], references: [id])
  receipientUser  Station?  @relation("ReceiverRelation", fields: [recipient], references: [id])
}